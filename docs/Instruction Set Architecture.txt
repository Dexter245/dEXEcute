Instruction Set Architecture (ISA) of the dEXEcute system v0.1.0
================================================================

Instructions
============

* is literal-flag, 1bit
each opcode 6+2bits

[instruction 		[opcode without			[dasm mnemonic with (example) usage]
 number]		 literals]

math
0			0				add** [srcR1, srcR2, dstR]
1			4				sub** [srcR1, srcR2, dstR]
2			8				mult** [srcR1, srcR2, dstR]
3			12				div** [srcR1, srcR2, dstR]
4			16				mod** [srcR1, srcR2, dstR]

logical
5			20				and** [srcR1, srcR2, dstR]
6			24				or** [srcR1, srcR2, dstR]
7			28				xor** [srcR1, srcR2, dstR]
8			32				nand** [srcR1, srcR2, dstR]
9			36				not* [srcR, dstR]
10			40				cmp** [srcR1, srcR2, dstR] //-1 if smaller, 0 if equal, 1 if bigger
	
memory
11			44				mr* [mAddr, dstR] //read from  memory to register
12			48				mw* [mAddr, srcR] //write from register to memory
13			52				mov [srcR, dstR] //move from register to register
14			56				put* [literalValue, dstR] //insert literalValue to dstR

execution
15			60				jmp* [cAddr, srcR1, srcR2] //jumps to cAddr when srcR1 == srcR2
16			64				hlt //stops all execution

mAddr = memory Address(RAM) - 16bit
cAddr = code Address(ROM) (more on that under memory) - 16bit
srcR = source register - 8bit
dstR = destination register - 8bit
literalValue = integer written into the dasm source code that will be put into a register directly. integers in ram or registers are not literals. - 16bit
* = max. one literal possible for instruction(dstR can never be a literal)
** = max. 2 literals possible for instruction

To let the cpu know if an argument is a literal or not 2 bits are used to indicate if the 1st or 2nd argument is a literal.
The instruction number is 6 bits long, it is shifted left 2 bits(equals multiplication with 4) and then the rightmost bit is 1 if the second argument is a literal, or the second-rightmost bit is 1 if the first argument is a literal, else 0.
Knowing if an argument is a literal or not is important since register-"addresses" are 8 bit long, RAM & ROM addresses and literals are 16bit long and of course the cpu needs to handle these things differently.
The column [opcode without literals] shows the opcode if no literals are used. If the first argument is a literal, the number has to be increased by 2, or by 1 for the seconds argument. If both are a literal the number has to be increased by 2+1=3.


Registers
=========

16 registers total - each 16bit
8 general purpose registers, named r0 to r7, addresses 0-7

l0, l1: 2 registers for literals, addresses 8-9, only used internally by the cpu, not used or accessible via assembly
sr - state register, each bit is different info about stuff, address 10, not used currently
ip - instruction pointer, points to codeMemory adress that gets executed next, address 11
addresses 12-15: not used currently, but reserved for future use

Data Types
==========

Everything is a 16-bit unsigned Integer. Numbers above 65535 simply don't exist so 16-bit is perfect. And don't even begin with negative or rational numbers.

Interrupts
==========

Not existing yet to keep the first milestone as simple as possible. This feature will probably be added in the very next milestone.

Memory
======

Every memory address is 16bit long, be it ROM or RAM.

There are currently 2 memory areas, the first is the ROM where all the code is located at. Since we're addressing it with 16bits its maximum size is 2^16=65536 bytes. Having multiple programs in the ROM is currently not natively supported, it's just a 64k bunch of instructions. 
The other memory area is the RAM, addressed with 16bits as well, so same maximum size of 64k memory. And nobody will ever need more than 64k memory ever.

Example Assembly Code
=====================

mr 1000, r0		//reads value from RAM-Address 1000 to r0
mr r0, r1		//reads value from RAM-Address in r0 to r1
add r0, r1, r2		//add values of r0 and r1 and store in r2
add r2, 50, r2		//add value of r2 and the value 50 and store in r2
not r2, r3		//reverses each bit in r2 and stores in r3
not 17, r4		//reverses each bit in binary 17 and stores in r4
cmp r2, r3, r4		//lets say r2==r3, then it would set r4=0
jmp r3, r4, 0		//jump to code in ROM-Address in r3 if r4==0
jmp :point, r4, r5	//jump to marked (code)location in ROM that has the name ':point' if r4==r5
:point			//marked location where jumping to is possible by using the literal ':point', points to hlt instruction
hlt			//end of programm, everything stops here
